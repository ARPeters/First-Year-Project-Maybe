x<-c(0, 0, 0, 15, 15, 15, 30, 30, 30, 45, 45, 45, 60, 60, 60, 75, 75, 75)
y<-c(8,6,8,12,20,14,25,21,24,31,33,28,44,39,42,4851,44)
xSquared<x*x
xSquared<-x*x
xSquared
xy<x*y
xy<-x*y
crossproduct<-x*y
ds<-cbind(x,y)
y<-c(8, 6, 8, 12, 20, 14, 25, 21, 24, 31, 33, 28, 44, 39, 42, 48, 51, 44)
crossproduct<-x*y
ySquared<-y*y
ds<-cbind(x,y,xSquared,ySquared, crossproduct)
ds
sum(x)
sum(y)
sum(xSquared)
sum(ySquared)
sum(crossproduct)
y2<-c(8.1, 7.8, 8.5, 9.8, 9.5, 8.9, 8.6, 10.2, 9.3, 9.2, 10.5)
y2*y2
sum(y2*y2)
install.packages("pROC")
library(pROC)
library(ROCR)
library(pROC)
truth<-c(0,0,0,1,1,1,1,1)
predicted<-c(0.1,.5,.3,.8,.9,.4,.9,.5)
pred<- prediction(predicted, truth)
perf<- performance(pred, "tpr", "fpr")
db = read.table("http://freakonometrics.free.fr/db.txt",header=TRUE,sep=";")
head(db)
attach(db)
X3bis=rep(NA,length(X3))
X3bis[X3%in%c("A","C","D")]="ACD"
X3bis[X3%in%c("B","E")]="BE"
db$X3bis=as.factor(X3bis)
head(db)
S=predict(reg, type="response")
reg=glm(Y~X1+X2+X3bis,family=binomial,data=db)
S=predict(reg, type="response")
S
reg
S
str(S)
?predict()
?glm()
roc.curve=function(s,print=FALSE){
Ps=(S>s)*1
FP=sum((Ps==1)*(Y==0))/sum(Y==0)
TP=sum((Ps==1)*(Y==1))/sum(Y==1)
if(print==TRUE){
print(table(Observed=Y,Predicted=Ps))
}
vect=c(FP,TP)
names(vect)=c("FPR","TPR")
return(vect)
}
threshold = 0.5
roc.curve(threshold, print=TRUE)
ROC.curve=Vectorize(roc.curve)
ROC.curve
I=(((S>threshold)&(Y==0_))|((S<=threshold&(Y==1))))
I=(((S>threshold)&(Y==0_))|((S<=threshold&(Y==1)))
I=(((S>threshold)&(Y==0_))|((S<=threshold)&(Y==1)))
I=(((S>threshold)&(Y==0))|((S<=threshold)&(Y==1)))
plot(S,Y,col=c("red", "blue"), [I+1], pch=19, cex=.7, xlab="", ylab=""))
plot(S,Y,col=c("red", "blue") [I+1], pch=19, cex=.7, xlab="", ylab=""))
plot(S,Y,col=c("red", "blue")[I+1], pch=19, cex=.7, xlab="", ylab=""))
plot(S,Y,col=c("red", "blue")[I+1], pch=19, cex=.7, xlab="", ylab="")
plot(S,Y,col=c("red","blue")[I+1],pch=19,cex=.7,,xlab="",ylab="")
abline(v=seuil col="grey")
abline(v=seuil, col="grey")
abline(v=seuil,col="gray")
M.ROC=ROC.curve(seq(0,1,by=.01))
ROC.curve
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="1")
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="l")
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2,type="l")
library(tree)
install.packages("tree")
library(tree)
ctr<-tree(Y~X1+X2+X3bis, data=db)
plot(ctr)
text(ctr)
S=predict(ctr)
roc.curve(threshold, print=TRUE)
ROC.curve=Vectorize(roc.curve)
I=(((S>threshold)&(Y==0))|((S<=threshold)&(Y==1)))
plot(S,Y,col=c("red", "blue")[I+1], pch=19, cex=.7, xlab="", ylab="")
plot(S,Y,col=c("red","blue")[I+1],pch=19,cex=.7,,xlab="",ylab="")
plot(S,Y,col=c("red","blue")[I+1],pch=19,cex=.7,,xlab="",ylab="")
M.ROC=ROC.curve(seq(0,1,by=.01))
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="l", xlab="False Positive Rate", ylab="True Positive Rate")
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="l", xlab="False Positive Rate", ylab="True Positive Rate")
plines(M.Roc.tree[1,], M.ROC.tree[2,], type="l", col="grey", lwd=2)
lines(M.Roc.tree[1,], M.ROC.tree[2,], type="l", col="grey", lwd=2)
S=predict(reg, type="response")
roc.curve(threshold, print=TRUE)
ROC.curve=Vectorize(roc.curve)
I=(((S>threshold)&(Y==0))|((S<=threshold)&(Y==1)))
plot(S,Y,col=c("red", "blue")[I+1], pch=19, cex=.7, xlab="", ylab="")
M.ROC=ROC.curve(seq(0,1,by=.01))
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="l", xlab="False Positive Rate", ylab="True Positive Rate")
S=predict(ctr)
roc.curve(threshold, print=TRUE)
ROC.curve=Vectorize(roc.curve)
#plotting predicted vs observed
I=(((S>threshold)&(Y==0))|((S<=threshold)&(Y==1)))
plot(S,Y,col=c("red", "blue")[I+1], pch=19, cex=.7, xlab="", ylab="")
M.ROC.tree=ROC.curve(seq(0,1,by=.01))
plot(M.ROC.tree[1,], M.ROC.tree[2,], col="grey", lwd=2, type="l", xlab="False Positive Rate", ylab="True Positive Rate")
plot(M.ROC[1,], M.ROC[2,], col="grey", lwd=2, type="l", xlab="False Positive Rate", ylab="True Positive Rate")
lines(M.Roc.tree[1,], M.ROC.tree[2,], type="l", col="grey", lwd=2)
lines(M.ROC.tree[1,], M.ROC.tree[2,], type="l", col="grey", lwd=2)
data(ROCR.simple)
ds<-cbind(ROCR.simple$predictions, ROCR.simple$labels)
colnames(ds)<-c("predictions", "labels")
ds<-as.data.frame(ds)
attach(ds)
pred<-prediction(predictions, labels)
class(pred)
slotNames(pred)
perfobject<-performance(pred, measure="tpr", x.measure="fpr")
plot(perfobject)
opt.cut = function(perf, pred){
cut.ind = mapply(FUN=function(x, y, p){
d = (x - 0)^2 + (y-1)^2
ind = which(d == min(d))
c(sensitivity = y[[ind]], specificity = 1-x[[ind]],
cutoff = p[[ind]])
}, perf$x.values<script cf-hash="f9e31" type="text/javascript">/* <![CDATA[ */!function()
{try
{var t="currentScript"in document?document.currentScript:function()
{for(var t=document.getElementsByTagName("script"),e=t.length;e--;)if(t[e].getAttribute("cf-hash"))return t[e]}();if(t&&t.previousSibling)
{var e,r,n,i,c=t.previousSibling,a=c.getAttribute("data-cfemail");if(a){for(e="",r=parseInt(a.substr(0,2),16),n=2;a.length-n;n+=2)i=parseInt(a.substr(n,2),16)^r,e+=String.fromCharCode(i);e=document.createTextNode(e),c.parentNode.replaceChild(e,c)
}
}
}catch(u)
{}
}();/* ]]> */</script>, perf@y.values<script cf-hash="f9e31" type="text/javascript">/* <![CDATA[ */!function(){try{var t="currentScript"in document?document.currentScript:function()
{for(var t=document.getElementsByTagName("script"),e=t.length;e--;)if(t[e].getAttribute("cf-hash"))return t[e]}();if(t&&t.previousSibling)
{var e,r,n,i,c=t.previousSibling,a=c.getAttribute("data-cfemail");if(a)
{for(e="",r=parseInt(a.substr(0,2),16),n=2;a.length-n;n+=2)i=parseInt(a.substr(n,2),16)^r,e+=String.fromCharCode(i);e=document.createTextNode(e),c.parentNode.replaceChild(e,c)
}
}
}catch(u)
{}}();/* ]]> */</script>, pred$cutoffs)
}
accPerf<-performance(pred, measure="acc")
accPerf
plot(accPerf)
?performance()
aucPerf<-performance(pred, measure="auc")
aucPerf
auc.perf@y.values<script cf-hash="f9e31" type="text/javascript">
auc.perf$y.values<script cf-hash="f9e31" type="text/javascript">
auc.perf@y.values<script cfhash="f9e31" type="text/javascript">
slots(aucPerf)
slot(aucPerf)
aucPerf$y.values
aucPerf@y.values
paucPerf<-performance(pred, measure="auc", fpr.stop=0.1)
paucPerf
paucPerf@y.values
MaxFPR=0.1
paucPerf<-performance(pred, measure="auc", fpr.stop=MaxFPR)
paucPerf@y.values
spaucPerf<-paucPerf/MaxFPR
spaucPerf<-paucPerf@y.values/MaxFPR
spaucPerf<-as.numeric(paucPerf@y.values)/MaxFPR
spaucPerf
as.numeric(paucPerf@y.values)
library(survival)
library(ROCR)
dsVets <- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/vets.dta")
names(dsVets)<-c("tx", "Large", "Adeno", "Small", "Squamous", "survt", "perf", "DisDur", "age", "priortx", "status")
library(foreign)
dsVets <- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/vets.dta")
names(dsVets)<-c("tx", "Large", "Adeno", "Small", "Squamous", "survt", "perf", "DisDur", "age", "priortx", "status")
head(dsVets)
coxphPractice1<-coxph(Surv(dsVets$survt, dsVets$status==1)~tx+Large+Adeno+Small+perf+DisDur+age+priortx, ties="breslow", data=dsVets)
coxphPractice1
glm_pr_Practice1<-glm(status~tx+Large+Adeno+Small+perf+DisDur+age+priortx +offset(log(survt)), family="poisson", data=dsVets)
glm_pr_Practice1
str(coxphPractice1)
str(glm_pr_Practice1)
coefficientComparisonTable<-cbind(coxphPractice1$coefficients, glm_pr_Practice1$coefficients)
length(coxphPractice1$coefficients)
length(glm_pr_Practice1$coefficients)
glm_pr_Practice1
PoissonPredictorCoefficients<-glm_pr_Practice1$coefficients[2:9]
coefficientComparisonTable<-cbind(coxphPractice1$coefficients, PoissonPredictorCoefficients)
coefficientComparisonTable
coefficientComparisonTable<-cbind(as.numeric(coxphPractice1$coefficients), PoissonPredictorCoefficients)
coefficientComparisonTable
colnames(coefficientComparisonTable)<-c("COX coefficients", "Poisson coefficients")
coefficientComparisonTable
?predict()
predPoisson<-prediction(glm_pr_Practice1, dsVets$status)
length(glm_pr_Practice1)
str(glm_pr_Practice1)
length(dsVets$status)
length(glm_pr_Practice1$linear.predictors)
length(coxPractice1)
length(coxphPractice1)
str(coxphPractice1)
predPoisson<-prediction(glm_pr_Practice1$linear.predictors, dsVets$status)
predPoisson
predCoxph<-prediciton(coxphPractice1$linear.predictors, dsVets$status)
predCoxph<-prediction(coxphPractice1$linear.predictors, dsVets$status)
perfPoisson<-performance(predPoisson, measure="trp", x.measure="fpr")
perfPoisson<-performance(predPoisson, measure="tpr", x.measure="fpr")
plot(perPoisson, col=c("red"))
plot(perfPoisson, col=c("red"))
plot(perfCoxph)
perfCoxph<-performance(predCoxph, measure="tpr", x.measure="fpr")
plot(perfCoxph)
plot(perfPoisson, col=c("red"))
lines()
plot(perfCoxph)
par(new=TRUE)
plot(perfCoxph)
plot(perfPoisson, col=c("red"))
par(new=TRUE)
plot(perfCoxph)
abline(a=0,b=1)
fairCompcheck<-cbind(glm_pr_Practice$linear.predictors)
fairCompcheck<-cbind(glm_pr_Practice1$linear.predictors, coxphPractice1$linear.predictors)
fairCompcheck
dsVets <- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/vets.dta")
names(dsVets)<-c("Treatment", "LargeCell", "AdenoCell", "SmallCell", "SquamousCell", "SurvivalTime", "PerformanceStatus",
"DiseaseDuration", "Age", "PriorTherapy", "Status")
Ch4Practice3 <- coxph(Surv(dsVets$SurvivalTime, dsVets$Status==1) ~ dsVets$Treatment + dsVets$LargeCell + dsVets$AdenoCell +
dsVets$SmallCell + dsVets$PerformanceStatus + dsVets$DiseaseDuration + dsVets$Age + dsVets$PriorTherapy, ties="breslow")
summary(Ch4Practice3)
dsAddicts<- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/addicts.dta")
names(dsAddicts)<-c("Subject", "Clinic", "Status", "SurvivalTime", "Prison", "Dose")
Ch4Test1 <- coxph(Surv(SurvivalTime, Status) ~ Clinic + Prison + Dose, ties="breslow", data=dsAddicts)
summary(Ch4Test1)
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
eventTimes <- unique(dsAddicts$SurvivalTime[dsAddicts$Status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$SurvivalTime,eventTimes[i]),min(d$SurvivalTime,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$SurvivalTime <= eventTimes[i]) {
if(d$Status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessDat <- ddply(.data=dsAddicts,.variables=.(Subject),.fun = createPTable)
ptProcessDat[ptProcessDat$Subject %in% c(166,111),]
dim(ptProcessDat)
colnames(dsAddicts)
Ch4Test1PoissonNew <- glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessDat)
summary(Ch4Test1PoissonNew)
summary(Ch4Test1Poisson)
summary(Ch4Test1Poisson)
Ch4Test1Poisson <- glm(SurvivalTime ~ Clinic + Prison + Dose, (family=poisson), data=dsAddicts)
summary(Ch4Test1Poisson)
Ch4Test1PoissonNew
summary(Ch4Test1PoissonNew)
dsAddicts<- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/addicts.dta")
dsVets <- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/vets.dta")
names(dsAddicts)<-c("Subject", "Clinic", "Status", "SurvivalTime", "Prison", "Dose")
Ch4Test1 <- coxph(Surv(SurvivalTime, Status) ~ Clinic + Prison + Dose, ties="breslow", data=dsAddicts)
summary(Ch4Test1)
Ch4Test1Poisson <- glm(Status ~ Clinic + Prison + Dose + offset(log(SurvivalTime)), (family=poisson), data=dsAddicts)
summary(Ch4Test1Poisson)
eventTimes <- unique(dsAddicts$SurvivalTime[dsAddicts$Status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$SurvivalTime,eventTimes[i]),min(d$SurvivalTime,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$SurvivalTime <= eventTimes[i]) {
if(d$Status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessDat <- ddply(.data=dsAddicts,.variables=.(Subject),.fun = createPTable)
ptProcessDat[ptProcessDat$Subject %in% c(166,111),]
dim(ptProcessDat)
Ch4Test1PoissonNew <- glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessDat)
summary(Ch4Test1PoissonNew)
summary(Ch4Test1Poisson)
summary(Ch4Test1)
summary(Ch4Test1PoissonNew)
str(Ch4Test1PoissonNew)
Ch4Test1PoissonNew$coefficients
length(Ch4Test1PoissonNew$coefficients)
CompeTable2<-cbind(Ch4Test1PoissonNew$coefficients[141:143], Ch4Test1$coefficients)
CompeTable2
colnames(CompTable2)<-c("Poisson coefficients", "Cox coefficients")
CompTable2<-cbind(Ch4Test1PoissonNew$coefficients[141:143], Ch4Test1$coefficients)
colnames(CompTable2)<-c("Poisson coefficients", "Cox coefficients")
CompTable
CompTable2
predPoisson2<-prediction(CH4Test1PoissonNew$linear.predictors, dsVets$status)
predPoisson2<-prediction(Ch4Test1PoissonNew$linear.predictors, dsVets$status)
colnames(dsAddicts)
predPoisson2<-prediction(Ch4Test1PoissonNew$linear.predictors, dsAddicts$Status)
predPoisson2<-prediction(Ch4Test1PoissonNew$linear.predictors[141:143], dsAddicts$Status)
length(Ch4Test1PoissonNew$linear.predictors[141:143])
dim(ptProcessDat)
head(ptProcessDat)
predPoisson2<-prediction(Ch4Test1PoissonNew$linear.predictors, ptProcessDat$Status)
predCoxph2<-prediction(Ch4Test1$linear.predictors, ptProcessDat$Status$Status)
predCoxph2<-prediction(Ch4Test1$linear.predictors, ptProcessDat$Status)
length(Ch4Test1$linear.predictors)
predCoxph2<-prediction(Ch4Test1$linear.predictors), dsAddicts$Status)
predCoxph2<-prediction(Ch4Test1$linear.predictors, dsAddicts$Status)
perfCoxph2<-performance(predCoxph2, measure="tpr", x.measure="fpr")
plot(perfPoisson2, col=c("red"))
perfPoisson2<-performance(predPoisson2, measure="tpr", x.measure="fpr")
plot(perfPoisson2, col=c("red"))
par(new=TRUE)
plot(perfCoxph2)
abline(a=0,b=1)
rm(list = ls(all = TRUE))
library(survival)
library(ROCR)
library(foreign)
dsVets <- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/vets.dta")
names(dsVets)<-c("tx", "Large", "Adeno", "Small", "Squamous", "survt", "perf", "DisDur", "age", "priortx", "status")
head(dsVets)
coxphPractice1<-coxph(Surv(dsVets$survt, dsVets$status==1)~tx+Large+Adeno+Small+perf+DisDur+age+priortx, ties="breslow", data=dsVets)
coxphPractice1
glm_pr_Practice1<-glm(status~tx+Large+Adeno+Small+perf+DisDur+age+priortx +offset(log(survt)), family="poisson", data=dsVets)
glm_pr_Practice1
cox.zph(coxphPractice1)
dsVetsEvents<-dsVets[dsVets$status==1,]
coxphPractice1Events<-coxph(Surv(dsVetsEvents$survt, dsVetsEvents$status==1)~tx+Large+Adeno+Small+perf+DisDur+age+priortx,
ties="breslow", data=dsVetsEvents)
cox.zph(coxphPractice1Events, transform="rank")
PoissonPredictorCoefficients<-glm_pr_Practice1$coefficients[2:9]
coefficientComparisonTable<-cbind(as.numeric(coxphPractice1$coefficients), PoissonPredictorCoefficients)
colnames(coefficientComparisonTable)<-c("COX coefficients", "Poisson coefficients")
coefficientComparisonTable
predPoisson<-prediction(glm_pr_Practice1$linear.predictors, dsVets$status)
perfPoisson<-performance(predPoisson, measure="tpr", x.measure="fpr")
predCoxph<-prediction(coxphPractice1$linear.predictors, dsVets$status)
perfCoxph<-performance(predCoxph, measure="tpr", x.measure="fpr")
plot(perfPoisson, col=c("red"))
par(new=TRUE)
plot(perfCoxph)
abline(a=0,b=1)
fairCompcheck<-cbind(glm_pr_Practice1$linear.predictors, coxphPractice1$linear.predictors)
#Counting process of coxph model
dsAddicts<- read.dta("http://web1.sph.emory.edu/dkleinb/allDatasets/surv2datasets/addicts.dta")
names(dsAddicts)<-c("Subject", "Clinic", "Status", "SurvivalTime", "Prison", "Dose")
Ch4Test1 <- coxph(Surv(SurvivalTime, Status) ~ Clinic + Prison + Dose, ties="breslow", data=dsAddicts)
summary(Ch4Test1)
Ch4Test1Poisson <- glm(Status ~ Clinic + Prison + Dose + offset(log(SurvivalTime)), (family=poisson), data=dsAddicts)
summary(Ch4Test1Poisson)
eventTimes <- unique(dsAddicts$SurvivalTime[dsAddicts$Status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$SurvivalTime,eventTimes[i]),min(d$SurvivalTime,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$SurvivalTime <= eventTimes[i]) {
if(d$Status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessDat <- ddply(.data=dsAddicts,.variables=.(Subject),.fun = createPTable)
ptProcessDat[ptProcessDat$Subject %in% c(166,111),]
dim(ptProcessDat)
colnames(dsAddicts)
Ch4Test1PoissonNew <- glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=ptProcessDat)
summary(Ch4Test1PoissonNew)
summary(Ch4Test1Poisson)
summary(Ch4Test1)
length(Ch4Test1PoissonNew$coefficients)
CompTable2<-cbind(Ch4Test1PoissonNew$coefficients[141:143], Ch4Test1$coefficients)
colnames(CompTable2)<-c("Poisson coefficients", "Cox coefficients")
CompTable2
predPoisson2<-prediction(Ch4Test1PoissonNew$linear.predictors, ptProcessDat$Status)
perfPoisson2<-performance(predPoisson2, measure="tpr", x.measure="fpr")
length(Ch4Test1PoissonNew$linear.predictors[141:143])
predCoxph2<-prediction(Ch4Test1$linear.predictors, dsAddicts$Status)
perfCoxph2<-performance(predCoxph2, measure="tpr", x.measure="fpr")
plot(perfPoisson2, col=c("red"))
par(new=TRUE)
plot(perfCoxph2)
abline(a=0,b=1)
head(ptProcessDat)
library(survival)
install.packages("psych.r")
install.packages("survsim.r")
?rnorm()
require(msm)
install.packages("msm.R")
g.inv <- sqrt
g <- function(x) {
x^2
}
t <- 0:199
t.diff <- (t[-1] - t[1:(length(t) - 1)])[-(length(t) - 1)]
g.inv.t <- g.inv(t)
g.inv.t.diff <- (g.inv(t[-1]) - g.inv(t[1:(length(t) - 1)]))[-(length(t) - 1)]
t.max <- 150
t.min <- 10
g.inv.t.max <- g.inv(t.max)
g.inv.t.min <- g.inv(t.min)
B <- function(N, m, M) {
runif(N, m, M)
}
b <- 2
n <- 1000
z.list <- list()
for (i in 1:n) {
z <- B(length(t), -0.5, 0.5)
z.list[[i]] <- cbind(z, exp(b * z))
}
k <- function(x, m, M, rates, t){
ifelse(x <= m | x >= M, 0, dpexp(x, rates, t))
}
gen.y <- function(x) {
x1 <- x[, 2]
d <- ppexp(g.inv.t.max, x1, g.inv.t) - ppexp(g.inv.t.min, x1, g.inv.t)
M <- 1 / d
r <- 60
repeat{
y <- rpexp(r, x1, g.inv.t)
u <- runif(r)
t <- M * ((k(y, g.inv.t.min, g.inv.t.max, x1, g.inv.t) / d /
dpexp(y, x1, g.inv.t)))
y <- y[u <= t][1]
if (!is.na(y)) break
}
y
}
y <- sapply(z.list, gen.y)
g.y <- g(y)
y <- sapply(z.list, gen.y)
setwd("~/Documents/Github/First-Year-Project-Maybe")
require(msm)
install.packages("msm.R")
