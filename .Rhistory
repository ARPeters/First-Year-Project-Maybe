#Getting cv error for each model
cvF<-cvFolds(n=length(dataLog$Event), K=10)
cvTestH<-cvTool(call=testH, y=dataLog$Event, folds=cvF)
cvTestI<-cvTool(call=testInt, y=dataLog$Event, folds=cvF)
cvTestLog<-cvTool(call=testLog, y=dataLog$Event, folds=cvF)
cvTestC<-cvTool(call=testControl, y=dataLog$Event, folds=cvF)
predTestControl<-prediction(testControl$linear.predictors, dataLog$Event)
perfTestControl<-performance(predTestControl, measure="auc")
AUCC<-as.numeric(perfTestControl@y.values)
predTestH<-prediction(testH$linear.predictors, dataLog$Event)
perfTestH<-performance(predTestH, measure="auc")
AUCH<-as.numeric(perfTestH@y.values)
predTestI<-prediction(testInt$linear.predictors, dataLog$Event)
perfTestI<-performance(predTestI, measure="auc")
AUCI<-as.numeric(perfTestI@y.values)
predTestLog<-prediction(testLog$linear.predictors, dataLog$Event)
perfTestLog<-performance(predTestLog, measure="auc")
AUCLog<-as.numeric(perfTestLog@y.values)
detach(dataLog)
#Getting AIC and BIC for each model
AICC<-(-2*testControl$loglik[2])+(2*(length(testControl$coefficients)))
BICC<-(-2*testControl$loglik[2])+(log(n)*(length(testControl$coefficients)))
AICH<-(-2*testH$loglik[2])+(2*(length(testH$coefficients)))
BICH<-(-2*testH$loglik[2])+(log(n)*(length(testH$coefficients)))
AICI<-(-2*testControl$loglik[2])+(2*(length(testInt$coefficients)))
BICI<-(-2*testControl$loglik[2])+(log(n)*(length(testInt$coefficients)))
AICLog<-(-2*testLog$loglik[2])+(2*(length(testLog$coefficients)))
BICLog<-(-2*testLog$loglik[2])+(log(n)*(length(testLog$coefficients)))
fitTable[i,1]<-AICC
fitTable[i,2]<-AICH
fitTable[i,3]<-AICI
fitTable[i,4]<-AICLog
fitTable[i,5]<-BICC
fitTable[i,6]<-BICH
fitTable[i,7]<-BICI
fitTable[i,8]<-BICLog
fitTable[i,9]<-cvTestC
fitTable[i,10]<-cvTestH
fitTable[i,11]<-cvTestI
fitTable[i,12]<-cvTestLog
fitTable[i,13]<-AUCC
fitTable[i,14]<-AUCH
fitTable[i,15]<-AUCI
fitTable[i,16]<-AUCLog
AICPropTable<-fitTable[,c(1:4)]
BICPropTable<-fitTable[,c(5:8)]
cvPropTable<-fitTable[,c(9:12)]
AUCPropTable<-fitTable[,c(13:16)]
for(m in 1:length(AICPropTable[,1])){
AICPropTable$WAICC[m]<-ifelse(AICPropTable[m,1]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICH[m]<-ifelse(AICPropTable[m,2]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICI[m]<-ifelse(AICPropTable[m,3]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$CAICLog[m]<-ifelse(AICPropTable[m,4]==min(AICPropTable[m,1:4]),1,0)
BICPropTable$WBICC[m]<-ifelse(BICPropTable[m,1]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICH[m]<-ifelse(BICPropTable[m,2]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICI[m]<-ifelse(BICPropTable[m,3]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$CBICLog[m]<-ifelse(BICPropTable[m,4]==min(BICPropTable[m,1:4]),1,0)
cvPropTable$WcvC[m]<-ifelse(cvPropTable[m,1]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvH[m]<-ifelse(cvPropTable[m,2]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvI[m]<-ifelse(cvPropTable[m,3]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$CcvLog[m]<-ifelse(cvPropTable[m,4]==min(cvPropTable[m,1:4]),1,0)
AUCPropTable$WAUCC[m]<-ifelse(AUCPropTable[m,1]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCH[m]<-ifelse(AUCPropTable[m,2]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCI[m]<-ifelse(AUCPropTable[m,3]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$CAUCLog[m]<-ifelse(AUCPropTable[m,4]==max(AUCPropTable[m,1:4]),1,0)
}
print(AICPropTable)
print(BICPropTable)
print(cvPropTable)
print(AUCPropTable)
AICPropWC[l]<-as.numeric(sum(AICPropTable$WAICC)/reps)
AICPropWH[l]<-as.numeric(sum(AICPropTable$WAICH)/reps)
AICPropWI[l]<-sum(AICPropTable$WAICI)/reps
AICPropCorrect[l]<-sum(AICPropTable$CAICLog)/reps
BICPropWC[l]<-sum(BICPropTable$WBICC)/reps
BICPropWH[l]<-sum(BICPropTable$WBICH)/reps
BICPropWI[l]<-sum(BICPropTable$WBICI)/reps
BICPropCorrect[l]<-sum(BICPropTable$CBICLog)/reps
cvPropWC[l]<-sum(cvPropTable$WcvC)/reps
cvPropWH[l]<-sum(cvPropTable$WcvH)/reps
cvPropWI[l]<-sum(cvPropTable$WcvI)/reps
cvPropCorrect[l]<-sum(cvPropTable$CcvLog)/reps
AUCPropWC[l]<-sum(AUCPropTable$WAUCC)/reps
AUCPropWH[l]<-sum(AUCPropTable$WAUCH)/reps
AUCPropWI[l]<-sum(AUCPropTable$WAUCI)/reps
AUCPropCorrect[l]<-sum(AUCPropTable$CAUCLog)/reps
print(c("Proportion of times AIC selected no-time model across weights."))
print(AICPropWC)
print(c("Proportion of times AIC selected heaviside model across weights."))
print(AICPropWH)
print(c("Proportion of times AIC selected Interaction model across weights"))
print(AICPropWI)
print(c("Proportion of times AIC selected (correct) Log model across weights"))
print(AICPropCorrect)
print(c("Proportion of times BIC selected no-time model across weights."))
print(BICPropWC)
print(c("Proportion of times BIC selected heaviside model across weights."))
print(BICPropWH)
print(c("Proportion of times BIC selected Interaction model across weights"))
print(BICPropWI)
print(c("Proportion of times BIC selected (correct) Log model across weights"))
print(BICPropCorrect)
print(c("Proportion of times cv selected no-time model across weights."))
print(cvPropWC)
print(c("Proportion of times cv selected heaviside model across weights."))
print(cvPropWH)
print(c("Proportion of times cv selected Interaction model across weights"))
print(cvPropWI)
print(c("Proportion of times cv selected (correct) Log model across weights"))
print(cvPropCorrect)
print(c("Proportion of times AUC selected no-time model across weights."))
print(AUCPropWC)
print(c("Proportion of times AUC selected heaviside model across weights."))
print(AUCPropWH)
print(c("Proportion of times AUC selected Interaction model across weights"))
print(AUCPropWI)
print(c("Proportion of times AUC selected (correct) Log model across weights"))
print(AUCPropCorrect)
}
}
rm(list = ls(all.names = TRUE))
library(cvTools)
library(survsim)
library(survival)
library(foreign)
library(PermAlgo)
library(ROCR)
ftw<-c(0, 0.01, 0.35, 0.7)
#ftw<-c(1:100)/100
#ftw<-c(0:20)/5
cvPropCorrect<-vector(length=length(ftw))
cvPropWC<-vector(length=length(ftw))
cvPropWH<-vector(length=length(ftw))
cvPropWI<-vector(length=length(ftw))
AUCPropCorrect<-vector(length=length(ftw))
AUCPropWC<-vector(length=length(ftw))
AUCPropWH<-vector(length=length(ftw))
AUCPropWI<-vector(length=length(ftw))
AICPropCorrect<-vector(length=length(ftw))
AICPropWC<-vector(length=length(ftw))
AICPropWH<-vector(length=length(ftw))
AICPropWI<-vector(length=length(ftw))
BICPropCorrect<-vector(length=length(ftw))
BICPropWC<-vector(length=length(ftw))
BICPropWH<-vector(length=length(ftw))
BICPropWI<-vector(length=length(ftw))
#For: weight of a specific time function (log)
for(l in 1:length(ftw)){
#Declaring Betas: first, we are looking at the heaviside function, so the last two time-dependent
#variables are given betas, all else are given 0 weight.
betas<-c(0.7, 0.7, 0.7, 0.1, 0.1, 0.1, ftw[l], ftw[l], 0, 0, 0, 0, 0, 0)
#Creating a table of AICs and BIC values
reps<-10
fitTable<-data.frame(matrix(ncol=16, nrow=reps, ))
colnames(fitTable)<-c("AICC",  "AICH", "AICI", "AICLog", "BICC","BICH", "BICI","BICLog", "cvC", "cvH", "cvI", "cvLog", "AUCC", "AUCH", "AUCI", "AUCLog")
#For this weight of specific time function, create this many sets of data
for(i in 1:reps){
n=500
m=365
xmat<-matrix(nrow=n*m, ncol=15)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,5]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,6]<-rep(round(rbinom(n,1, 0.5)), each=m)
#7th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,7]<-rep.int(1:m, times=n)
#8th and 9th columns are going to represent the log of time * Strong1 and Strong2, respectively.
xmat[,8]<-log(xmat[,7])*xmat[,1]
xmat[,9]<-log(xmat[,7])*xmat[,2]
#10th and 11th columns are going to represent time squared * Strong1 and Strong2, respectively
xmat[,10]<-xmat[,7]*xmat[,7]*xmat[,1]
xmat[,11]<-xmat[,7]*xmat[,7]*xmat[,2]
#12th and 13th columns are going to represent interactions between Strong1*Weak1 and Strong2*Weak2
xmat[,12]<-xmat[,1]*xmat[,4]
xmat[,13]<-xmat[,2]*xmat[,5]
#12 and 13th columns are going to represent interactions between heaviside function and strong1/strong2 respectively
for(j in 1:length(xmat[,7])){
xmat[j,14]<-ifelse(xmat[j,7]<=182, 0, xmat[j,1])
xmat[j,15]<-ifelse(xmat[j,7]<=182, 0, xmat[j,2])
}
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "intForFt", "logtStrong1", "logtStrong2", "t2Strong1", "t2Strong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H")
#Strong and Weak variables, plust two heaviside function variables
dsLog<-as.matrix(dsMaster[,c(1:6, 8:15)])
eventTimesMaybe<-runif(n, 1, m)
dataLog<-permalgorithm(n, m, Xmat=dsLog, XmatNames=c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "logtStrong1", "logtStrong2", "t2Strong1", "t2Strong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H"), eventRandom=eventTimesMaybe, betas=betas)
attach(dataLog)
survobjectLog<-Surv(time=Start, time2=Stop, Event==1)
#Creating the cox models for each set of variables
testControl<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3, data=dataLog, ties="breslow")
testH<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1H + Strong2H, data=dataLog, ties="breslow")
testInt<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1Weak1 + Strong2Weak2, data=dataLog, ties="breslow")
testLog<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + logtStrong1 + logtStrong2, data=dataLog, ties="breslow")
#Getting cv error for each model
cvF<-cvFolds(n=length(dataLog$Event), K=10)
cvTestH<-cvTool(call=testH, y=dataLog$Event, folds=cvF)
cvTestI<-cvTool(call=testInt, y=dataLog$Event, folds=cvF)
cvTestLog<-cvTool(call=testLog, y=dataLog$Event, folds=cvF)
cvTestC<-cvTool(call=testControl, y=dataLog$Event, folds=cvF)
predTestControl<-prediction(testControl$linear.predictors, dataLog$Event)
perfTestControl<-performance(predTestControl, measure="auc")
AUCC<-as.numeric(perfTestControl@y.values)
predTestH<-prediction(testH$linear.predictors, dataLog$Event)
perfTestH<-performance(predTestH, measure="auc")
AUCH<-as.numeric(perfTestH@y.values)
predTestI<-prediction(testInt$linear.predictors, dataLog$Event)
perfTestI<-performance(predTestI, measure="auc")
AUCI<-as.numeric(perfTestI@y.values)
predTestLog<-prediction(testLog$linear.predictors, dataLog$Event)
perfTestLog<-performance(predTestLog, measure="auc")
AUCLog<-as.numeric(perfTestLog@y.values)
detach(dataLog)
#Getting AIC and BIC for each model
AICC<-(-2*testControl$loglik[2])+(2*(length(testControl$coefficients)))
BICC<-(-2*testControl$loglik[2])+(log(n)*(length(testControl$coefficients)))
AICH<-(-2*testH$loglik[2])+(2*(length(testH$coefficients)))
BICH<-(-2*testH$loglik[2])+(log(n)*(length(testH$coefficients)))
AICI<-(-2*testControl$loglik[2])+(2*(length(testInt$coefficients)))
BICI<-(-2*testControl$loglik[2])+(log(n)*(length(testInt$coefficients)))
AICLog<-(-2*testLog$loglik[2])+(2*(length(testLog$coefficients)))
BICLog<-(-2*testLog$loglik[2])+(log(n)*(length(testLog$coefficients)))
fitTable[i,1]<-AICC
fitTable[i,2]<-AICH
fitTable[i,3]<-AICI
fitTable[i,4]<-AICLog
fitTable[i,5]<-BICC
fitTable[i,6]<-BICH
fitTable[i,7]<-BICI
fitTable[i,8]<-BICLog
fitTable[i,9]<-cvTestC
fitTable[i,10]<-cvTestH
fitTable[i,11]<-cvTestI
fitTable[i,12]<-cvTestLog
fitTable[i,13]<-AUCC
fitTable[i,14]<-AUCH
fitTable[i,15]<-AUCI
fitTable[i,16]<-AUCLog
AICPropTable<-fitTable[,c(1:4)]
BICPropTable<-fitTable[,c(5:8)]
cvPropTable<-fitTable[,c(9:12)]
AUCPropTable<-fitTable[,c(13:16)]
for(m in 1:length(AICPropTable[,1])){
AICPropTable$WAICC[m]<-ifelse(AICPropTable[m,1]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICH[m]<-ifelse(AICPropTable[m,2]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICI[m]<-ifelse(AICPropTable[m,3]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$CAICLog[m]<-ifelse(AICPropTable[m,4]==min(AICPropTable[m,1:4]),1,0)
BICPropTable$WBICC[m]<-ifelse(BICPropTable[m,1]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICH[m]<-ifelse(BICPropTable[m,2]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICI[m]<-ifelse(BICPropTable[m,3]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$CBICLog[m]<-ifelse(BICPropTable[m,4]==min(BICPropTable[m,1:4]),1,0)
cvPropTable$WcvC[m]<-ifelse(cvPropTable[m,1]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvH[m]<-ifelse(cvPropTable[m,2]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvI[m]<-ifelse(cvPropTable[m,3]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$CcvLog[m]<-ifelse(cvPropTable[m,4]==min(cvPropTable[m,1:4]),1,0)
AUCPropTable$WAUCC[m]<-ifelse(AUCPropTable[m,1]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCH[m]<-ifelse(AUCPropTable[m,2]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCI[m]<-ifelse(AUCPropTable[m,3]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$CAUCLog[m]<-ifelse(AUCPropTable[m,4]==max(AUCPropTable[m,1:4]),1,0)
}
print(AICPropTable)
print(BICPropTable)
print(cvPropTable)
print(AUCPropTable)
AICPropWC[l]<-as.numeric(sum(AICPropTable$WAICC)/reps)
AICPropWH[l]<-as.numeric(sum(AICPropTable$WAICH)/reps)
AICPropWI[l]<-sum(AICPropTable$WAICI)/reps
AICPropCorrect[l]<-sum(AICPropTable$CAICLog)/reps
BICPropWC[l]<-sum(BICPropTable$WBICC)/reps
BICPropWH[l]<-sum(BICPropTable$WBICH)/reps
BICPropWI[l]<-sum(BICPropTable$WBICI)/reps
BICPropCorrect[l]<-sum(BICPropTable$CBICLog)/reps
cvPropWC[l]<-sum(cvPropTable$WcvC)/reps
cvPropWH[l]<-sum(cvPropTable$WcvH)/reps
cvPropWI[l]<-sum(cvPropTable$WcvI)/reps
cvPropCorrect[l]<-sum(cvPropTable$CcvLog)/reps
AUCPropWC[l]<-sum(AUCPropTable$WAUCC)/reps
AUCPropWH[l]<-sum(AUCPropTable$WAUCH)/reps
AUCPropWI[l]<-sum(AUCPropTable$WAUCI)/reps
AUCPropCorrect[l]<-sum(AUCPropTable$CAUCLog)/reps
print(c("Proportion of times AIC selected no-time model across weights."))
print(AICPropWC)
print(c("Proportion of times AIC selected heaviside model across weights."))
print(AICPropWH)
print(c("Proportion of times AIC selected Interaction model across weights"))
print(AICPropWI)
print(c("Proportion of times AIC selected (correct) Log model across weights"))
print(AICPropCorrect)
print(c("Proportion of times BIC selected no-time model across weights."))
print(BICPropWC)
print(c("Proportion of times BIC selected heaviside model across weights."))
print(BICPropWH)
print(c("Proportion of times BIC selected Interaction model across weights"))
print(BICPropWI)
print(c("Proportion of times BIC selected (correct) Log model across weights"))
print(BICPropCorrect)
print(c("Proportion of times cv selected no-time model across weights."))
print(cvPropWC)
print(c("Proportion of times cv selected heaviside model across weights."))
print(cvPropWH)
print(c("Proportion of times cv selected Interaction model across weights"))
print(cvPropWI)
print(c("Proportion of times cv selected (correct) Log model across weights"))
print(cvPropCorrect)
print(c("Proportion of times AUC selected no-time model across weights."))
print(AUCPropWC)
print(c("Proportion of times AUC selected heaviside model across weights."))
print(AUCPropWH)
print(c("Proportion of times AUC selected Interaction model across weights"))
print(AUCPropWI)
print(c("Proportion of times AUC selected (correct) Log model across weights"))
print(AUCPropCorrect)
}
}
getwd()
setwd("~/Documents/Github/First-Year-Project-Maybe")
rm(list = ls(all.names = TRUE))
library(cvTools)
library(survsim)
library(survival)
library(foreign)
library(PermAlgo)
library(ROCR)
ftw<-c(0, 0.01, 0.35, 0.7)
#ftw<-c(1:100)/100
cvPropWL<-vector(length=length(ftw))
cvPropWC<-vector(length=length(ftw))
cvPropWH<-vector(length=length(ftw))
cvPropCI<-vector(length=length(ftw))
AUCPropWL<-vector(length=length(ftw))
AUCPropWC<-vector(length=length(ftw))
AUCPropWH<-vector(length=length(ftw))
AUCPropCI<-vector(length=length(ftw))
AICPropWL<-vector(length=length(ftw))
AICPropWC<-vector(length=length(ftw))
AICPropWH<-vector(length=length(ftw))
AICPropCI<-vector(length=length(ftw))
BICPropWL<-vector(length=length(ftw))
BICPropWC<-vector(length=length(ftw))
BICPropWH<-vector(length=length(ftw))
BICPropCI<-vector(length=length(ftw))
#For: weight of a specific time function (heaviside, the last one)
for(l in 1:length(ftw)){
#Declaring Betas: first, we are looking at the heaviside function, so the last two time-dependent
#variables are given betas, all else are given 0 weight.
betas<-c(0.7, 0.7, 0.7, 0.1, 0.1, 0.1, 0, 0, 0, 0, ftw[l], ftw[l], 0, 0)
#Creating a table of AICs and BIC values
reps<-5
fitTable<-data.frame(matrix(ncol=16, nrow=reps, ))
colnames(fitTable)<-c("AICC",  "AICH", "AICI", "AICLog", "BICC","BICH", "BICI","BICLog", "cvC", "cvH", "cvI", "cvLog", "AUCC", "AUCH", "AUCI", "AUCLog")
#For this weight of specific time function, create this many sets of data
for(i in 1:reps){
n=1000
m=365
xmat<-matrix(nrow=n*m, ncol=15)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,5]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,6]<-rep(round(rbinom(n,1, 0.5)), each=m)
#7th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,7]<-rep.int(1:m, times=n)
#8th and 9th columns are going to represent the log of time * Strong1 and Strong2, respectively.
xmat[,8]<-log(xmat[,7])*xmat[,1]
xmat[,9]<-log(xmat[,7])*xmat[,2]
#10th and 11th columns are going to represent time squared * Strong1 and Strong2, respectively
xmat[,10]<-xmat[,7]*xmat[,7]*xmat[,1]
xmat[,11]<-xmat[,7]*xmat[,7]*xmat[,2]
#12th and 13th columns are going to represent interactions between Strong1*Weak1 and Strong2*Weak2
xmat[,12]<-xmat[,1]*xmat[,4]
xmat[,13]<-xmat[,2]*xmat[,5]
#14th and 15th columns are going to represent interactions between heaviside function and strong1/strong2 respectively
for(j in 1:length(xmat[,7])){
xmat[j,14]<-ifelse(xmat[j,7]<=182, 0, xmat[j,1])
xmat[j,15]<-ifelse(xmat[j,7]<=182, 0, xmat[j,2])
}
dsMaster<-as.data.frame(xmat)
colnames(dsMaster)<-c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "intForFt", "logtStrong1", "logtStrong2", "t2Strong1", "t2Strong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H")
#Strong and Weak variables, plust two heaviside function variables
dsInt<-as.matrix(dsMaster[,c(1:6, 8:15)])
eventTimesMaybe<-runif(n, 1, m)
dataInt<-permalgorithm(n, m, Xmat=dsInt, XmatNames=c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "logtStrong1", "logtStrong2", "t2Strong1", "t2Strong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H"), eventRandom=eventTimesMaybe, betas=betas)
attach(dataInt)
survobjectInt<-Surv(time=Start, time2=Stop, Event==1)
#Creating the cox models for each set of variables
testControl<-coxph(survobjectInt ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3, data=dataInt, ties="breslow")
testH<-coxph(survobjectInt ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1H + Strong2H, data=dataInt, ties="breslow")
testInt<-coxph(survobjectInt ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1Weak1 + Strong2Weak2, data=dataInt, ties="breslow")
testLog<-coxph(survobjectInt ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + logtStrong1 + logtStrong2, data=dataInt, ties="breslow")
#Getting cv error for each model
cvF<-cvFolds(n=length(dataInt$Event), K=10)
cvTestH<-cvTool(call=testH, y=dataInt$Event, folds=cvF)
cvTestI<-cvTool(call=testInt, y=dataInt$Event, folds=cvF)
cvTestLog<-cvTool(call=testLog, y=dataInt$Event, folds=cvF)
cvTestC<-cvTool(call=testControl, y=dataInt$Event, folds=cvF)
predTestControl<-prediction(testControl$linear.predictors, dataInt$Event)
perfTestControl<-performance(predTestControl, measure="auc")
AUCC<-as.numeric(perfTestControl@y.values)
predTestH<-prediction(testH$linear.predictors, dataInt$Event)
perfTestH<-performance(predTestH, measure="auc")
AUCH<-as.numeric(perfTestH@y.values)
predTestI<-prediction(testInt$linear.predictors, dataInt$Event)
perfTestI<-performance(predTestI, measure="auc")
AUCI<-as.numeric(perfTestI@y.values)
predTestLog<-prediction(testLog$linear.predictors, dataInt$Event)
perfTestLog<-performance(predTestLog, measure="auc")
AUCLog<-as.numeric(perfTestLog@y.values)
detach(dataInt)
#Getting AIC and BIC for each model
AICC<-(-2*testControl$loglik[2])+(2*(length(testControl$coefficients)))
BICC<-(-2*testControl$loglik[2])+(log(n)*(length(testControl$coefficients)))
AICH<-(-2*testH$loglik[2])+(2*(length(testH$coefficients)))
BICH<-(-2*testH$loglik[2])+(log(n)*(length(testH$coefficients)))
AICI<-(-2*testInt$loglik[2])+(2*(length(testInt$coefficients)))
BICI<-(-2*testInt$loglik[2])+(log(n)*(length(testInt$coefficients)))
AICLog<-(-2*testLog$loglik[2])+(2*(length(testLog$coefficients)))
BICLog<-(-2*testLog$loglik[2])+(log(n)*(length(testLog$coefficients)))
fitTable[i,1]<-AICC
fitTable[i,2]<-AICH
fitTable[i,3]<-AICI
fitTable[i,4]<-AICLog
fitTable[i,5]<-BICC
fitTable[i,6]<-BICH
fitTable[i,7]<-BICI
fitTable[i,8]<-BICLog
fitTable[i,9]<-cvTestC
fitTable[i,10]<-cvTestH
fitTable[i,11]<-cvTestI
fitTable[i,12]<-cvTestLog
fitTable[i,13]<-AUCC
fitTable[i,14]<-AUCH
fitTable[i,15]<-AUCI
fitTable[i,16]<-AUCLog
AICPropTable<-fitTable[,c(1:4)]
BICPropTable<-fitTable[,c(5:8)]
cvPropTable<-fitTable[,c(9:12)]
AUCPropTable<-fitTable[,c(13:16)]
}
for(m in 1:length(AICPropTable[,1])){
AICPropTable$WAICC[m]<-ifelse(AICPropTable[m,1]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICH[m]<-ifelse(AICPropTable[m,2]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$CAICI[m]<-ifelse(AICPropTable[m,3]==min(AICPropTable[m,1:4]),1,0)
AICPropTable$WAICLog[m]<-ifelse(AICPropTable[m,4]==min(AICPropTable[m,1:4]),1,0)
BICPropTable$WBICC[m]<-ifelse(BICPropTable[m,1]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICH[m]<-ifelse(BICPropTable[m,2]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$CBICI[m]<-ifelse(BICPropTable[m,3]==min(BICPropTable[m,1:4]),1,0)
BICPropTable$WBICLog[m]<-ifelse(BICPropTable[m,4]==min(BICPropTable[m,1:4]),1,0)
cvPropTable$WcvC[m]<-ifelse(cvPropTable[m,1]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvH[m]<-ifelse(cvPropTable[m,2]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$CcvI[m]<-ifelse(cvPropTable[m,3]==min(cvPropTable[m,1:4]),1,0)
cvPropTable$WcvLog[m]<-ifelse(cvPropTable[m,4]==min(cvPropTable[m,1:4]),1,0)
AUCPropTable$WAUCC[m]<-ifelse(AUCPropTable[m,1]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCH[m]<-ifelse(AUCPropTable[m,2]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$CAUCI[m]<-ifelse(AUCPropTable[m,3]==max(AUCPropTable[m,1:4]),1,0)
AUCPropTable$WAUCLog[m]<-ifelse(AUCPropTable[m,4]==max(AUCPropTable[m,1:4]),1,0)
}
print(AICPropTable)
print(BICPropTable)
print(cvPropTable)
print(AUCPropTable)
AICPropWC[l]<-as.numeric(sum(AICPropTable$WAICC)/reps)
AICPropWH[l]<-as.numeric(sum(AICPropTable$WAICH)/reps)
AICPropCI[l]<-sum(AICPropTable$CAICI)/reps
AICPropWL[l]<-sum(AICPropTable$WAICLog)/reps
BICPropWC[l]<-sum(BICPropTable$WBICC)/reps
BICPropWH[l]<-sum(BICPropTable$WBICH)/reps
BICPropCI[l]<-sum(BICPropTable$CBICI)/reps
BICPropWL[l]<-sum(BICPropTable$WBICLog)/reps
cvPropWC[l]<-sum(cvPropTable$WcvC)/reps
cvPropWH[l]<-sum(cvPropTable$WcvH)/reps
cvPropCI[l]<-sum(cvPropTable$WcvI)/reps
cvPropWLog[l]<-sum(cvPropTable$CcvLog)/reps
AUCPropWC[l]<-sum(AUCPropTable$WAUCC)/reps
AUCPropWH[l]<-sum(AUCPropTable$WAUCH)/reps
AUCPropCI[l]<-sum(AUCPropTable$WAUCI)/reps
AUCPropWLog[l]<-sum(AUCPropTable$CAUCLog)/reps
print(c("Proportion of times AIC selected no-time model across weights."))
print(AICPropWC)
print(c("Proportion of times AIC selected heaviside model across weights."))
print(AICPropWH)
print(c("Proportion of times AIC selected (correct) Interaction model across weights"))
print(AICPropCI)
print(c("Proportion of times AIC selected Log model across weights"))
print(AICPropWL)
print(c("Proportion of times BIC selected no-time model across weights."))
print(BICPropWC)
print(c("Proportion of times BIC selected heaviside model across weights."))
print(BICPropWH)
print(c("Proportion of times BIC selected (correct) Interaction model across weights"))
print(BICPropCI)
print(c("Proportion of times BIC selected Log model across weights"))
print(BICPropWL)
print(c("Proportion of times cv selected no-time model across weights."))
print(cvPropWC)
print(c("Proportion of times cv selected heaviside model across weights."))
print(cvPropWH)
print(c("Proportion of times cv selected (correct) Interaction model across weights"))
print(cvPropCI)
print(c("Proportion of times cv selected (correct) Log model across weights"))
print(cvPropWLog)
print(c("Proportion of times AUC selected no-time model across weights."))
print(AUCPropWC)
print(c("Proportion of times AUC selected heaviside model across weights."))
print(AUCPropWH)
print(c("Proportion of times AUC selected Interaction model across weights"))
print(AUCPropCI)
print(c("Proportion of times AUC selected (correct) Log model across weights"))
print(AUCPropWL)
}
